This is a test for git cmds

Learned about:
	VCSs
	Git what, why
	3 Git config file levels
	states of a file: tracked, untracked, modified, staged, unstaged, .gitignore file
	Commands:
		# mirror an existing repo and it creates .git file itself
		git clone <url> <dir name if any>

		# create new .git file i.e. new git repo
		git init
		git add
		git commit -m ""
		git status
		
		git diff
		git diff --staged
		
		git commit -a -m "directly commit tracked files"
		
		git rm <file>
		git rm --cached <file> # for keeping in working dir but adding to ignore
		
		# Git cant detect file movement, but using mv command it can rename a file
		git mv <from_file> <to_file>
		# equivalent to 3 commands of mv, rm, add
		
		git log
		git log -p -2 #shows diff between last 2 commits only
		git log --stat # summary of diffs
		git log --pretty=oneline
		git log --pretty=format"%h - %an, %ar : %s"
		# this creates a format:
		#	abbrevated hash - author name, author date relative : subject
		
		author and committer are different sometimes
		
		git log --pretty=format" " --graph # branch ASCII graphs
		git log --since="<format>"
		git log --author=""
		git log --grep="<pattern in commit messages>
		
		git log -S <funcName or any string in files that changed>
		# so it shows those commits which changed the number of occurences of <>
		
		git log -- <path for dir or file>
		# shows commits containing changes in these files
		
		git log --no-merges # prevents displaying commit merges
		
		git commit --amend #replaces last commit
	
		#old undos
			git reset HEAD <filename> # to unstage a staged file
			git checkout -- <filename> # unmodifying a modified file
			# reverts the file to its last staged or commit state
			# this also deletes any unstaged or committed changes to file in your local dir
		#current undos, same actions
		git restore --staged <filename> # to unstage a staged file
		git restore <filename> # to unmodify a modified file
		
		git clone <url> # adds origin implicitly
		git remote -v # lists all remote repos linked to local repo
		
		# to add origin explicitly with custom name
		git remote add <custom name> <url>
		
		git fetch <remote origin name> 
		# downloads all the data from remote linked repo that is not present locally in our repo
		# but does not merge it automatically
		
		git pull <remote origin name> # fetch and merge locally
		# pull.rebase must be set to auto merge when fetching
		git config --global pull.rebase "true"
		
		git push <remote origin name> <our branch to push> # push to a remote repo but heads must be same
		
		git remote show <remote origin name> # inspect remote origin
		
		git remote rename <oldname> <newname for remote> # rename remote
		git remote remove <remote name> # remove remote
		# or just git remote rm <remote>
		
		git tag  # lists all tags in a repo i.e. marks in the repos history
		git tag -l "<pattern>"
		
		git tag -a <tagname> -m "<message>" # create annotation tag with details
		git tag <tagname> # creates a lightweight tag without details
		
		git show <tagname> # shows details of the tag
		
		# to add a tag to older commit
		git tag -a <tagname> <checksum of the commit or just starting part of checksum>
		
		# with push command for branches, tags arent auto pushed, we have to pish them separately
		git push <remote origin> <tagname>
		# to push all tags both annotated and lw
		git push <remote origin> --tags
		
		git tag -d <tagname> # to delete tag locally
		git push <remote origin> --deleted <tagname># delete tags remotely
		
		# to checkout a tag to see what version its pointing to i.e. moving your head
		git checkout <tagname>
		# any commits here will not be in any branch and only accessible via hashes
		# to create commits that stay, create a new bracnh at that tag
		git checkout -b <branchname> <tagname>
		
		# create aliases for commands
		git config --global alias.<aliasname> <command>
		# combine example
		git config --global alias.unstage 'restore --staged'
		# now simply 
		git unstage <file>
		
		
		# creating new branch at the current commit i.e. the commit where head is pointing to
		git branch <name>
		# to check branch pointers
		git log --oneline --decorate
		
		# change head pointer i.e. moves head to other branch
		git checkout <branchname>
		
		git log --all # shows all the logs of all branches
		
		# also using switch
		git switch -c <newbranch name> # creates and then switches to it
		git switch <olderbranch> # swithces to other branch
		
		
		
		 
		
		
		

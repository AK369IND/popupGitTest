This is a test for git cmds

Learned about:
	VCSs
	Git what, why
	3 Git config file levels
	states of a file: tracked, untracked, modified, staged, unstaged, .gitignore file
	Commands:
		# mirror an existing repo and it creates .git file itself
		git clone <url> <dir name if any>

		# create new .git file i.e. new git repo
		git init
		git add
		git commit -m ""
		git status
		
		git diff
		git diff --staged
		
		git commit -a -m "directly commit tracked files"
		
		git rm <file>
		git rm --cached <file> # for keeping in working dir but adding to ignore
<<<<<<< HEAD
		
		# Git cant detect file movement, but using mv command it can rename a file
		git mv <from_file> <to_file>
		# equivalent to 3 commands of mv, rm, add
		
		git log
		git log -p -2 #shows diff between last 2 commits only
		git log --stat # summary of diffs
		git log --pretty=oneline
		git log --pretty=format"%h - %an, %ar : %s"
		# this creates a format:
		#	abbrevated hash - author name, author date relative : subject
		
		author and committer are different sometimes
		
		git log --pretty=format" " --graph # branch ASCII graphs
		git log --since="<format>"
		git log --author=""
		git log --grep="<pattern in commit messages>
		
		git log -S <funcName or any string in files that changed>
		# so it shows those commits which changed the number of occurences of <>
		
		git log -- <path for dir or file>
		# shows commits containing changes in these files
		
		git log --no-merges # prevents displaying commit merges
		
		git commit --amend #replaces last commit
	
		#old undos
			git reset HEAD <filename> # to unstage a staged file
			git checkout -- <filename> # unmodifying a modified file
			# reverts the file to its last staged or commit state
			# this also deletes any unstaged or committed changes to file in your local dir
		#current undos, same actions
		git restore --staged <filename> # to unstage a staged file
		git restore <filename> # to unmodify a modified file
		
		git clone <url> # adds origin implicitly
		git remote -v # lists all remote repos linked to local repo
		
		# to add origin explicitly with custom name
		git remote add <custom name> <url>
		
		git fetch <remote origin name> 
		# downloads all the data from remote linked repo that is not present locally in our repo
		# but does not merge it automatically
		
		git pull <remote origin name> # fetch and merge locally
		# pull.rebase must be set to auto merge when fetching
		git config --global pull.rebase "true"
		
		git push <remote origin name> <our branch to push> # push to a remote repo but heads must be same
		
		git remote show <remote origin name> # inspect remote origin
		
		git remote rename <oldname> <newname for remote> # rename remote
		git remote remove <remote name> # remove remote
		# or just git remote rm <remote>
		 
		
		
		
=======
>>>>>>> 26b38b6c9afad2221a4e58c0ca491f915eac6467
